Instructions to configure your Ubuntu computer to run SANDRA.

We have sucessfully deployed in a Ubuntu 10.04 32-bit OS. It is important to have a 32-bit Unbuntu and a 32-bit Java VM.
We have not tested whether different versions of Ubuntu support the libraries necessary to run SANDRA. 

1) Download and install OpenJDK-6 and OpenJRE-6 (OpenJDK-7 and OpenJRE-7 might work as well, but we have not tested it)

>sudo apt-get install openjdk-6-jdk
>sudo apt-get install openjdk-6-jre

2) Make sure you are running the 32-bit version of Java:

>java -version

It should show the 32-bit openjdk-6 version.

If it doesn't show that you can manualy set the Java option:
 
>sudo update-alternatives --config java
>sudo update-alternatives --config javac
>sudo update-alternatives --config javaws

If you don't find any Java alternative, please read and adapt this tutorial to your needs: https://wiki.kuali.org/display/KULRICE/Updating+Default+Java+via+Ubuntu+Alternatives

2) Download the lastest unsable version of OpenNI. 

3) Donwload the attached file org_OpenNI_NativeMethods.cpp from https://groups.google.com/forum/?fromgroups#!topic/openni-dev/Q2XJ-SE7-lU%5B1-25%5D

4) Remove the Wrappers/OpenNI.jni/org_OpenNI_NativeMethods.cpp and put there my new version.

5) Compile and Install OpenNI
	Requirements:
		1) GCC 4.x
		   From: http://gcc.gnu.org/releases.html
		   Or via apt:
		   sudo apt-get install g++
		2) Python 2.6+/3.x
		   From: http://www.python.org/download/
		   Or via apt:
		   sudo apt-get install python
		3) LibUSB 1.0.8 
		   From: http://sourceforge.net/projects/libusb/
		   Or via apt:
		   sudo apt-get install libusb-1.0-0-dev
		4) FreeGLUT3
		   From: http://freeglut.sourceforge.net/index.php#download
		   Or via apt:
		   sudo apt-get install freeglut3-dev
		5) JDK 6.0
		   From: http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u26-download-400750.html
		   Or via apt:
		   sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner"
		   sudo apt-get update
		   sudo apt-get install sun-java6-jdk
		   
	Optional Requirements (To build the documentation):
		1) Doxygen
		   From: http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc
		   Or via apt:
		   sudo apt-get install doxygen
		2) GraphViz
		   From: http://www.graphviz.org/Download_linux_ubuntu.php
		   Or via apt:
		   sudo apt-get install graphviz

	Optional Requirements (To build the Mono wrapper):
		1) Mono
		   From: http://www.go-mono.com/mono-downloads/download.html
		   Or via apt:
		   sudo apt-get install mono-complete
		   
	Building OpenNI:
		1) Go into the directory: "Platform/Linux/CreateRedist".
		   Run the script: "./RedistMaker".
		   This will compile everything and create a redist package in the "Platform/Linux/Redist" directory.
		   It will also create a distribution in the "Platform/Linux/CreateRedist/Final" directory.
		2) Go into the directory: "Platform/Linux/Redist".
		   Run the script: "sudo ./install.sh" (needs to run as root)

  		   The install script copies key files to the following location:
		       Libs into: /usr/lib
		       Bins into: /usr/bin
		       Includes into: /usr/include/ni
		       Config files into: /var/lib/ni
			
		To build the package manually, you can run "make" in the "Platform\Linux\Build" directory.
		If you wish to build the Mono wrappers, also run "make mono_wrapper" and "make mono_samples".


6) Download the latest unstable version of the avin2 sensor from https://github.com/avin2/SensorKinect/


	Requirements:
		1) GCC 4.x
		   From: http://gcc.gnu.org/releases.html
		   Or via apt:
		   sudo apt-get install g++
		2) Python 2.6+/3.x
		   From: http://www.python.org/download/
		   Or via apt:
		   sudo apt-get install python
		3) OpenNI 1.3.x.x
		   From: http://www.openni.org/Downloads/OpenNIModules.aspx
		   
	Building Sensor:
		1) Go into the directory: "Platform/Linux/CreateRedist".
		   Run the script: "sudo ./RedistMaker".
		   This will compile everything and create a redist package in the "Platform/Linux/Redist/Sensor-Bin-Linux-x86-v5.1.0.25" directory.
		   It will also create a distribution in the "Platform/Linux/CreateRedist/Final" directory.
		2) Go into the directory: "Platform/Linux/Redist/Sensor-Bin-Linux-x86-v5.1.0.25".
		   Run the script: "sudo ./install.sh" (needs to run as root)

  		   The install script copies key files to the following location:
		       Libs into: /usr/lib
		       Bins into: /usr/bin
		       Config files into: /usr/etc/primesense
		       USB rules into: /etc/udev/rules.d 
		       Logs will be created in: /var/log/primesense
			
		To build the package manually, you can run "make" in the "Platform\Linux\Build" directory.	
		Important: Please note that even though the directory is called Linux, you can also use it to compile it for 64-bit targets and pretty much any other linux based environment.	
3) Install unstable NITE (http://www.openni.org/downloadfiles/opennimodules/openni-compliant-middleware-binaries/33-latest-unstable)
	   Do: ./sudo install.sh




If the console shows any USB-related error:
1st Make sure you're running the program as superuser
2nd Make sure you have properly installed libusbJava: 
	
  0. Download libusb-1.0.8 
  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Put libusbpp-0.1.so.4.4.4 in /usr/lib/i386-linux-gnu (or /usr/lib/i486-linux-gnu)
Put libusbJava.so.2.0.4 in /usr/lib
Do: ln -s libusbpp-0.1.so.4.4.4 libusbpp-0.1.4



