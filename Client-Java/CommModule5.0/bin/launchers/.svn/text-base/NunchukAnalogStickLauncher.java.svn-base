package launchers;

import iservices.INunchukAnalogStickService;

import java.io.IOException;
import java.util.Iterator;

import org.wiigee.device.Wiimote;
import org.wiigee.event.AnalogStickEvent;
import org.wiigee.event.AnalogStickListener;
import org.wiigee.event.DataListener;
import org.wiigee.event.ExtensionEvent;
import org.wiigee.event.ExtensionListener;

import services.NunchukAnalogStickServiceEvent;

import control.DeviceManager;
import control.IListenerCommModule;
import control.LauncherWrapper;

public class NunchukAnalogStickLauncher extends LauncherWrapper implements AnalogStickListener{

	
	/**
	 * This field is the reference to the object wiiMote of DeviceManager class.
	 */
	private Wiimote wiiMote;

	/**
	 * Returns the object wiiMote.
	 * @return noninManager The object wiiMote.
	 */
	public Wiimote getWiiMote(){
		return wiiMote;
	}
	
	/**
	 * Adds a listener to the list of listeners of the superclass LauncherWrapper.
	 * @param l The listener that have to be added.
	 */
	public void addListener (INunchukAnalogStickService l){	
		super.addListener(l);
		
	}
	
	/**
	 * Calls to the superclass LauncherWrapper function dropService and drops one WiiMoted labeled with the given parameter from the DeviceManager.
	 * It also sets the Nunchuk of that WiiMote to false.
	 * @param label The label of the WiiMote whose service is going to be dropped.
	 */
	public void dropService(int label){
		try {
			wiiMote.setNunchukEnabled(false);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		super.dropService();
		DeviceManager.getDeviceManager().dropWiiMote(label);	
	}
	
	/**
	 * Links this class with the DeviceManager by adding itself as listener.
	 * @param wm The Wiimote object that must be now the field noninManager of this class.
	 */
	public NunchukAnalogStickLauncher(Wiimote wm) {
		wiiMote= wm; 
		wm.addAnalogStickListener(this);
	}
	
	//Specific functions
	/**
	 * Throws the given AnalogStickEvent to all listeners in the listenerList as a NunchukAnalogStickServiceEvent.
	 * @param event The AnalogStickEvent.
	 */
	@Override
	public void analogStickChanged(AnalogStickEvent event) {
		NunchukAnalogStickServiceEvent se = new NunchukAnalogStickServiceEvent(wiiMote, event.getPoint());	
		Iterator<IListenerCommModule> it = listenersList.iterator();
		while(it.hasNext()){
			INunchukAnalogStickService l = (INunchukAnalogStickService)it.next();
			l.analogStickEventReceived(se);		
		}			
	}

	/**
	 * Not implemented because it does not belong to the throwing analog stick event logic.
	 */
	@Override
	public void add(Class<DataListener> arg0, DataListener arg1) {
		
	}
	/**
	 * Not implemented because it does not belong to the throwing analog stick event logic.
	 */
	@Override
	public void extensionConnected(ExtensionEvent arg0) {
		
	}
	/**
	 * Not implemented because it does not belong to the throwing analog stick event logic.
	 */
	@Override
	public void extensionDisconnected(ExtensionEvent arg0) {
		
	}
	/**
	 * Not implemented because it does not belong to the throwing analog stick event logic.
	 */
	@Override
	public ExtensionListener[] getListeners(Class<ExtensionListener> arg0) {
		
		return null;
	}
	/**
	 * Not implemented because it does not belong to the throwing analog stick event logic.
	 */
	@Override
	public void remove(Class<ExtensionListener> arg0, ExtensionListener arg1) {
		
	}

}
