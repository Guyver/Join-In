package launchers;


import iservices.IWiiMoteIRGlanceService;

import java.io.IOException;
import java.util.Iterator;

import org.wiigee.device.Wiimote;

import services.WiiMoteServiceIRGlanceEvent;

import control.DeviceManager;
import control.IListenerCommModule;
import control.LauncherWrapper;
import IRGlancePackage.IRGlance;
import IRGlancePackage.IRGlanceListener;
import IRGlancePackage.SpeedEvent;

public class WiiMoteIRGlanceLauncher extends LauncherWrapper implements IRGlanceListener{
	
	/**
	 * This field is the created IRGalnce object.
	 */
	private IRGlance irglance;
	/**
	 * This field is the reference to the object wiiMote of DeviceManager class.
	 */
	private Wiimote wiimote;
	
	/**
	 * Returns the object irglance.
	 * @return IRGlance The object irglance.
	 */
	public IRGlance getIRGlance() {
		return irglance;
	}
	
	/**
	 * Returns the object wiiMote.
	 * @return noninManager The object wiiMote.
	 */
	public Wiimote getWiimote() {
		return wiimote;
	}
	
	/**
	 * Adds a listener to the list of listeners of the superclass LauncherWrapper.
	 * @param l The listener that have to be added.
	 */
	public void addListener (IWiiMoteIRGlanceService l){	
		super.addListener(l);
	}
	
	/**
	 * Calls to the superclass LauncherWrapper function dropService() and drops one WiiMoted labeled with the given parameter from the DeviceManager.
	 * @param label The label of the WiiMote whose service is going to be dropped.
	 */
	public void dropService(int label){
		super.dropService();
		DeviceManager.getDeviceManager().dropWiiMote(label);	
	}
	
	/**
	 * Links this class with the DeviceManager by adding itself as listener.
	 * It also set the event filter of the IRGlanceLibrary , the IR_MODE (to IR_MODE_EXTENDED) and sets the period to 1 second.
	 * @param wm The Wiimote object that must be now the field noninManager of this class.
	 */
	public WiiMoteIRGlanceLauncher(Wiimote wm) {

		wiimote = wm;
    	try {
			irglance = new IRGlance(1000);
	    	irglance.setEventFilter(3);

			irglance.addListener(this);
			wm.setInfraredCameraEnabled(true, Wiimote.IR_MODE_EXTENDED);
			wm.addInfraredListener(irglance);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		
	}



	//Specific functions
	/**
	 * Throws the given SpeedEvent to all listeners in the listenerList as a WiiMoteServiceIRGlanceEvent.
	 * @param event The SpeedEvent.
	 */
	@Override
	public void speedUpdated(SpeedEvent event) {
		WiiMoteServiceIRGlanceEvent se = new WiiMoteServiceIRGlanceEvent(irglance,irglance.getPeriod(),event.speed);	
		Iterator<IListenerCommModule> it = listenersList.iterator();
		while(it.hasNext()){
			IWiiMoteIRGlanceService l = (IWiiMoteIRGlanceService)it.next();
			
			l.iRGlanceReceived(se);	
			
		}			
	}



	
}
