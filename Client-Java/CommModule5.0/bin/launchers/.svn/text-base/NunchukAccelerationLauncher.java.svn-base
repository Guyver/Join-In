package launchers;

import iservices.INunchukAccelerationService;

import java.io.IOException;
import java.util.Iterator;

import org.wiigee.device.Nunchuk;
import org.wiigee.device.Wiimote;

import org.wiigee.event.AccelerometerEvent;
import org.wiigee.event.AccelerometerListener;

import services.NunchukAccelerationServiceEvent;

import control.DeviceManager;
import control.IListenerCommModule;
import control.LauncherWrapper;


public class NunchukAccelerationLauncher extends LauncherWrapper implements AccelerometerListener<Nunchuk>{

	/**
	 * This field is the reference to the object wiiMote of DeviceManager class.
	 */
	private Wiimote wiiMote;

	/**
	 * Returns the object wiiMote.
	 * @return noninManager The object wiiMote.
	 */
	public Wiimote getWiiMote(){
		return wiiMote;
	}
	
	/**
	 * Adds a listener to the list of listeners of the superclass LauncherWrapper.
	 * @param l The listener that have to be added.
	 */
	public void addListener (INunchukAccelerationService l){	
		super.addListener(l);
		
	}
	
	/**
	 * Calls to the superclass LauncherWrapper function dropService and drops one WiiMoted labeled with the given parameter from the DeviceManager.
	 * It also sets the Nunchuk of that WiiMote to false.
	 * @param label The label of the WiiMote whose service is going to be dropped.
	 */
	public void dropService(int label){
		try {
			wiiMote.setNunchukEnabled(false);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		super.dropService();
		DeviceManager.getDeviceManager().dropWiiMote(label);	
	}
	
	/**
	  * Links this class with the DeviceManager by adding itself as listener.
	 * @param wm The Wiimote object that must be now the field noninManager of this class.
	 */
	public NunchukAccelerationLauncher(Wiimote wm) {
		wiiMote= wm; 
		wm.addNunchukAccelerometerListener(this);
		
	}

	//Specific functions
	/**
	 * Throws the given AccelerometerEvent to all listeners in the listenerList as a NunchukAccelerationServiceEvent.
	 * @param event The AccelerometerEvent.
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void accelerometerChanged(AccelerometerEvent event) {
	 
		NunchukAccelerationServiceEvent se = new NunchukAccelerationServiceEvent(wiiMote, event.getX(), event.getY(), event.getZ())	;
		Iterator<IListenerCommModule> it = listenersList.iterator();
		while(it.hasNext()){
			INunchukAccelerationService l = (INunchukAccelerationService)it.next();
			l.nunchukAccelerationReceived(se);		
		}	
	}

}
