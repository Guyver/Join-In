package control;

import java.io.IOException;
import java.util.*;

import launchers.*;

import org.wiigee.control.WiimoteWiigee;
import org.wiigee.device.Wiimote;

import NoninPackage.NoninManager;

import edu.unsw.cse.wiiboard.WiiBoard;
import edu.unsw.cse.wiiboard.WiiBoardDiscoverer;
import edu.unsw.cse.wiiboard.WiiBoardDiscoveryListener;

/**
 * A singleton class which has all necessary logic to offer the different kind of gadget services.
 * @author Santiago Hors Fraile
 */
public class DeviceManager implements WiiBoardDiscoveryListener{

	/**
	 * This object is the only object that can exist of this class. This object have to be the one used to get the service launchers.
	 */
	static private DeviceManager dm = null;
	/**
	 * This object is the manager of the Nonin. It is the one which will do the Nonin connections and disconnections.
	 */
	NoninManager noninManager = null;
	/**
	 * This field counts the number of Nonins that have been connected. Due to the way in which this library has been developed, its value can only be 0 or 1.
	 */
	int noninCounter= 0;
	/**
	 * This field represents the discoverer of the WiiBoard.
	 */
	WiiBoardDiscoverer wbd = null;
	/**
	 * This field represents the WiiBoard itself.
	 */
    WiiBoard wiiBoard= null;
	/**
	 * This field counts the number of connected WiiBoards. Due to the way in which this library has been developed, its value can only be 0 or 1.
	 */
	int wiiBoardCounter = 0;
	/**
	 * This field maps the connected WiiMote objects. The X value represents the label of the WiiMote and the Y value the reference to the WiiMote object.
	 */
	Map<Integer,Wiimote> wiiMoteCreated = new HashMap<Integer,Wiimote>();
	/**
	 * This field maps the number of connected WiiMote. The X value represents the label of the WiiMote and the Y value the number of connected WiiMotes.
	 */
	Map<Integer,Integer> wiiMoteCounter = new HashMap<Integer,Integer>();

	/** 
	 * Returns a new instance of DeviceManager if it did not exist or the instance that was created if there was a created instance already.
	 * @return DeviceManager
	 */
	static public DeviceManager getDeviceManager() {
		System.setProperty("bluecove.jsr82.psm_minimum_off", "true");		

	        if (dm == null) {
	            dm = new DeviceManager();
	        }
	        return dm;
     }

	/**
	 * Returns a new Nonin-service launcher if there was not any NoninLauncher created yet or a reference to the created object if there was one created already.
	 * It throws an exception if the Nonin was not found when the DiscoveryListener probed the BlueTooth area.
	 * See the javadocNoninDiscoveryListener and NoninManager (both of them belongs to the NoninLibrary library)
	 * @return The reference to the NoninLauncher object.
	 * @throws Exception
	 */
	public NoninLauncher getNoninLauncher() throws Exception{ //We allow to exist only one Nonin gadget
		NoninLauncher nl=null;
		if(noninCounter==0){
			noninManager = new NoninManager();
			noninManager.connect();
			nl = new NoninLauncher(noninManager);	
		}else{
			nl= new NoninLauncher(noninManager);
		}
		noninCounter++;
		return nl;
	}
	
	/**
	 * Returns a new WiiBoard-service launcher if there was not any WiiBoardLauncher created yet or a reference to the created object if there was one created already.
	 * @return The reference to the WiiBoardLauncher object.
	 */
	public WiiBoardLauncher getWiiBoardLauncher(){//We allow to exist only one WiiBoard gadget
		WiiBoardLauncher wbl;
		if(wiiBoardCounter==0){	
			wbd = WiiBoardDiscoverer.getWiiBoardDiscoverer();
			wbd.addWiiBoardDiscoveryListener(this);
			wbd.startWiiBoardSearch();	
			try {
				synchronized (this) {
				this.wait();
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			wbl = new WiiBoardLauncher(wiiBoard);
						
		}else{
			wbl = new WiiBoardLauncher(wiiBoard);			
		}	
		wiiBoardCounter++;
		return wbl;		
	}
	
	/**
	 * Returns a new WiiMoteAccelerationLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
	 * The connected WiiMote will turn on one LED, the one corresponding to the label (starting from left to right). 
	 * If the label value is higher than four, a module 4 operation will be applied so that one LED will be lighted up too.
	 * @param label The label that identifies one WiiMote from another. 
	 * @return The reference to the WiiMoteAccelerationLauncher object.
	 */
	public WiiMoteAccelerationLauncher getWiiMoteAccelerationLauncher(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;	
		if(wiiMoteCreated.containsKey(new Integer(label))){	
			wm = wiiMoteCreated.get(new Integer(label));
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
				wm.setLED((label%4==0)?4:label%4);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		try{
			wiiMoteCounter.put(new Integer(label), new Integer(wiiMoteCounter.get(new Integer(label)).intValue()+1));
		}catch(Exception e){
			wiiMoteCounter.put(new Integer(label), new Integer(1));
		}
		return new WiiMoteAccelerationLauncher(wm);
	}	
	
	/**
	 * Returns a new WiiMoteButtonsLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
 	 * The connected WiiMote will turn on one LED, the one corresponding to the label (starting from left to right). 
 	 * If the label value is higher than four, a module 4 operation will be applied so that one LED will be lighted up too.
	 * @param label The label that identifies one WiiMote from another. 
	 * @return The reference to the WiiMoteButtonsLauncher object.
	 */
	public WiiMoteButtonsLauncher getWiiMoteButtonsLauncher(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;	
		
		if(wiiMoteCreated.containsKey(new Integer(label))){	
			wm = wiiMoteCreated.get(new Integer(label));
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
				wm.setLED((label%4==0)?4:label%4);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		try{
			wiiMoteCounter.put(new Integer(label), new Integer(wiiMoteCounter.get(new Integer(label)).intValue()+1));
		}catch(Exception e){
			wiiMoteCounter.put(new Integer(label), new Integer(1));
		}
		return new WiiMoteButtonsLauncher(wm);
	}
	
	/**
	 * Returns a new WiiMoteGestureLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
	 * The connected WiiMote will turn on one LED, the one corresponding to the label (starting from left to right).
	 * If the label value is higher than four, a module 4 operation will be applied so that one LED will be lighted up too.
	 * @param label The label that identifies one WiiMote from another. 
	 * @return The reference to the WiiMoteButtonsLauncher object.
	 */
	public WiiMoteGestureLauncher getWiiMoteGesturesLauncher(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;	
		if(wiiMoteCreated.containsKey(new Integer(label))){	
			wm = wiiMoteCreated.get(new Integer(label));
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
				wm.setLED((label%4==0)?4:label%4);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	    wiiMoteCounter.put(new Integer(label), new Integer((wiiMoteCounter.get(new Integer(label))).intValue()+1));
		return new WiiMoteGestureLauncher(wm);
	}
	
	/**
	 * Returns a new WiiMoteIRGlanceLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
 	 * The connected WiiMote will turn on one LED, the one corresponding to the label (starting from left to right).
 	 * If the label value is higher than four, a module 4 operation will be applied so that one LED will be lighted up too.
	 * @param label The label that identifies one WiiMote from another. 
	 * @return The reference to the WiiMoteButtonsLauncher object.
	 */
	public WiiMoteIRGlanceLauncher getWiiMoteIRGlanceLauncher(int label){
		
		WiimoteWiigee wg = null;
		Wiimote wm = null;
		if(wiiMoteCreated.containsKey(new Integer(label))){		
			wm = wiiMoteCreated.get(new Integer(label));			
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
				wm.setLED(label);
			} catch (IOException e) {
				e.printStackTrace();
			}		
		}
        wiiMoteCounter.put(new Integer(label), new Integer((wiiMoteCounter.get(new Integer(label))).intValue()+1));
		
		return new WiiMoteIRGlanceLauncher(wm);
	}
	
	/**
	 * Returns a new WiiMoteIRLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
 	 * The connected WiiMote will turn on one LED, the one corresponding to the label (starting from left to right).
 	 * If the label value is higher than four, a module 4 operation will be applied so that one LED will be lighted up too.
	 * @param label The label that identifies one WiiMote from another. 
	 * @return The reference to the WiiMoteIRLauncher object.
	 */
	public WiiMoteIRLauncher getWiiMoteIRLauncher(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;
		if(wiiMoteCreated.containsKey(new Integer(label))){		
			wm = wiiMoteCreated.get(new Integer(label));			
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
				wm.setLED((label%4==0)?4:label%4);
			} catch (IOException e) {
				e.printStackTrace();
			}		
		}
        wiiMoteCounter.put(new Integer(label), new Integer((wiiMoteCounter.get(new Integer(label))).intValue()+1));
		return new WiiMoteIRLauncher(wm);
	}
	
	/**
	 * You have to call this function when you do not need one service of the Nonin any longer.
	 * This function subtracts one from the noninCounter. If noninCounter becomes 0, the Nonin will be disconnected.
	 */
	public void dropNonin(){
		noninCounter--;
		if (noninCounter==0){
			noninManager.disconnect();
		}
	}
	
	/**
	 * You have to call this function when you do not need one service of the WiiBoard any longer.
	 * This function subtracts one from the wiiBoardCounter. If noninCounter becomes 0, the WiiBoard will be disconnected.
	 */
	public void dropWiiBoard(){
		wiiBoardCounter--;
		if(wiiBoardCounter==0){
			wiiBoard.cleanup();
		}
		
	}
	/**
	 * You have to call this function when you do not need one service of the WiiMote any longer.
	 * This function subtracts one from the value mapped by the label given as parameter in wiiMoteCounter map. If that value becomes 0, the WiiMote mapped by label in the wiiMoteCreated map will be disconnected.
	 * @param label The label that identifies one WiiMote from another. 
	 */
	public void dropWiiMote(int label){
		
        wiiMoteCounter.put(new Integer(label), new Integer((wiiMoteCounter.get(new Integer(label))).intValue()-1));
		if(wiiMoteCounter.get(new Integer(label)).intValue()==0){
			Wiimote wm= wiiMoteCreated.get(new Integer(label));
			wm.disconnect();
			wiiMoteCreated.put(new Integer(label),null);
			
		}		
	}

	/**
	 * Notifies all waiting threads of this class when a WiiBoard is discovered.
	 * @param wb The discovered WiiBoard.
	 */
	public void wiiBoardDiscovered(WiiBoard wb) {
		this.wiiBoard= wb;
		System.out.println("wb = "+wb);
		synchronized (this) {
			notifyAll();
		}
	}
	/**
	 * Connects the Nunchuk to the WiiMote whose label is the one given as a parameter. 
	 * @param label The label that identifies one WiiMote from another.
	 */
	public void setNunchukEnabled(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;	
		if(wiiMoteCreated.containsKey(new Integer(label))){	
			wm = wiiMoteCreated.get(new Integer(label));
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		wm.connectNunchuk();
	
	}
	
	/**
	 * Disconnects the Nunchuk from the WiiMote whose label is the one given as a parameter. 
	 * @param label The label that identifies one WiiMote from another.
	 */
	public void setNunchukDisabled(int label){
		Wiimote wm = null;	
		if(wiiMoteCreated.containsKey(new Integer(label))){	
			wm = wiiMoteCreated.get(new Integer(label));
			wm.disconnectNunchuk();
		}else{
			
		}
		
	
	
	}
	/**
	 * Connects the WiiMotionPlus to the WiiMote whose label is the one given as a parameter. 
	 * @param label The label that identifies one WiiMote from another.
	 */
	public void setWiiMotionPlusEnabled(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;	
		if(wiiMoteCreated.containsKey(new Integer(label))){	
			wm = wiiMoteCreated.get(new Integer(label));
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		wm.connectWiiMotionPlus();
	
	}
	
	/**
     * Disconnects the WiiMotionPlus from the WiiMote whose label is the one given as a parameter. 
	 * @param label The label that identifies one WiiMote from another.
	 */
	public void setWiiMotionPlusDisabled(int label){
		Wiimote wm = null;	
		if(wiiMoteCreated.containsKey(new Integer(label))){	
			wm = wiiMoteCreated.get(new Integer(label));
			wm.disconnectWiiMotionPlus();
		}else{
			
		}
	
	}
	
	/**
	 * Returns a new NunchukAnalogStickLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
	 * @param label The label that identifies one WiiMote from another.
	 * @return NunchukAnalogStickLaucher
	 */
	public NunchukAnalogStickLauncher getNunchukAnalogStickLauncher(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;
		if(wiiMoteCreated.containsKey(new Integer(label))){		
			wm = wiiMoteCreated.get(new Integer(label));			
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
			} catch (IOException e) {
				e.printStackTrace();
			}		
		}
        wiiMoteCounter.put(new Integer(label), new Integer((wiiMoteCounter.get(new Integer(label))).intValue()+1));
        wm.connectNunchuk();
		return new NunchukAnalogStickLauncher(wm);
	}
	
	/**
	 * Returns a new NunchukAccelerationLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
	 * @param label The label that identifies one WiiMote from another.
	 * @return NunchukAccelerationLauncher 
	 */
	public NunchukAccelerationLauncher getNunchukAccelerationLauncher(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;
		if(wiiMoteCreated.containsKey(new Integer(label))){		
			wm = wiiMoteCreated.get(new Integer(label));			
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
			} catch (IOException e) {
				e.printStackTrace();
			}		
		}
        
        wiiMoteCounter.put(new Integer(label), new Integer((wiiMoteCounter.get(new Integer(label))).intValue()+1));
        wm.connectNunchuk();
		return new NunchukAccelerationLauncher(wm);
	}
	
	/**
	 * Returns a new NunchukButtonsLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
	 * @param label The label that identifies one WiiMote from another.
	 * @return NunchukButtonsLauncher
	 */
	public NunchukButtonsLauncher getNunchukButtonsLauncher(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;
		if(wiiMoteCreated.containsKey(new Integer(label))){		
			wm = wiiMoteCreated.get(new Integer(label));			
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
			} catch (IOException e) {
				e.printStackTrace();
			}		
		}
        wiiMoteCounter.put(new Integer(label), new Integer((wiiMoteCounter.get(new Integer(label))).intValue()+1));
        wm.connectNunchuk();
		return new NunchukButtonsLauncher(wm);
	}
	
	/**
	 * Returns a new WiiMoteRotationLauncher from the WiiMote whose label is the one given as parameter. 
	 * If there is not any WiiMote with the given label yet, a new WiiMote object is created.
	 * @param label The label that identifies one WiiMote from another.
	 * @return WiiMoteRotationLauncher
	 */
	public WiiMoteRotationLauncher getWiiMoteRotationLauncher(int label){
		WiimoteWiigee wg = null;
		Wiimote wm = null;

		if(wiiMoteCreated.containsKey(new Integer(label))){		
			wm = wiiMoteCreated.get(new Integer(label));			
		}else{
			wg = new WiimoteWiigee();
			try {
				wm = wg.getDevice();
				wiiMoteCreated.put(new Integer(label), wm);
			} catch (IOException e) {
				e.printStackTrace();
			}		
		}
		wm.connectWiiMotionPlus();

        wiiMoteCounter.put(new Integer(label), new Integer((wiiMoteCounter.get(new Integer(label))).intValue()+1));
		return new WiiMoteRotationLauncher(wm);
	}

}
