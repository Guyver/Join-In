Instructions for the Kinect.

1) Install unstable OpenNI (http://www.openni.org/Downloads/OpenNIModules.aspx)
  Do: ./sudo install.sh
2) Install Sensor (https://github.com/avin2/SensorKinect/)
Requirements:
1) GCC 4.x
  From: http://gcc.gnu.org/releases.html
  Or via apt:
  sudo apt-get install g++
2) Python 2.6+/3.x
  From: http://www.python.org/download/
  Or via apt:
  sudo apt-get install python
3) OpenNI 1.3.x.x
  From: http://www.openni.org/Downloads/OpenNIModules.aspx
  
Building Sensor:
1) Go into the directory: "Platform/Linux/CreateRedist".
  Run the script: "sudo ./RedistMaker".
  This will compile everything and create a redist package in the "Platform/Linux/Redist/Sensor-Bin-Linux-x86-v5.1.0.25" directory.
  It will also create a distribution in the "Platform/Linux/CreateRedist/Final" directory.
2) Go into the directory: "Platform/Linux/Redist/Sensor-Bin-Linux-x86-v5.1.0.25".
  Run the script: "sudo ./install.sh" (needs to run as root)

    The install script copies key files to the following location:
      Libs into: /usr/lib
      Bins into: /usr/bin
      Config files into: /usr/etc/primesense
      USB rules into: /etc/udev/rules.d 
      Logs will be created in: /var/log/primesense
To build the package manually, you can run "make" in the "Platform\Linux\Build" directory.
Important: Please note that even though the directory is called Linux, you can also use it to compile it for 64-bit targets and pretty much any other linux based environment.
3) Install unstable NITE (http://www.openni.org/downloadfiles/opennimodules/openni-compliant-middleware-binaries/33-latest-unstable)
  Do: ./sudo install.sh




If the console shows any USB-related error:
1st Make sure you're running the program as superuser
2nd Make sure you have properly installed libusbJava: 
  0. Download libusb-1.0.8 
  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Put libusbpp-0.1.so.4.4.4 in /usr/lib/i386-linux-gnu (or /usr/lib/i486-linux-gnu)
Put libusbJava.so.2.0.4 in /usr/lib
Do: ln -s libusbpp-0.1.so.4.4.4 libusbpp-0.1.4
