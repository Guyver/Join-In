package launchers;

import iservices.*;

import java.util.Iterator;

import org.wiigee.device.Wiimote;
import org.wiigee.event.AccelerationEvent;
import org.wiigee.event.AccelerationListener;
import org.wiigee.event.MotionStartEvent;
import org.wiigee.event.MotionStopEvent;

import services.*;

import control.DeviceManager;
import control.IListenerCommModule;
import control.LauncherWrapper;
public class WiiMoteAccelerationLauncher extends LauncherWrapper implements AccelerationListener{

	/**
	 * This field is the reference to the object wiiMote of DeviceManager class.
	 */
	private Wiimote wiiMote;
	
	/**
	 * Returns the object wiiMote.
	 * @return noninManager The object wiiMote.
	 */
	public Wiimote getWiiMote(){
		return wiiMote;
	}
	
	/**
	 * Adds a listener to the list of listeners of the superclass LauncherWrapper.
	 * @param l The listener that have to be added.
	 */
	public void addListener (IWiiMoteAccelerationService l){	
		super.addListener(l);
	}
	
	/**
	 * Calls to the superclass LauncherWrapper function dropService and drops one WiiMoted labeled with the given parameter from the DeviceManager.
	 * @param label The label of the WiiMote whose service is going to be dropped.
	 */
	public void dropService(int label){
		super.dropService();
		DeviceManager.getDeviceManager().dropWiiMote(label);	
	}
	/**
	 * Links this class with the DeviceManager by adding itself as listener.
	 * @param wm The Wiimote object that must be now the field noninManager of this class.
	 */
	public WiiMoteAccelerationLauncher(Wiimote wm) {
		wiiMote= wm; 
		wm.addAccelerationListener(this);
	}
	
	//Specific functions

	/**
	 * Throws the given AccelerationEvent to all listeners in the listenerList as a WiiMoteServiceAccelerationEvent.
	 * @param event The AccelerationEvent.
	 */
	public void accelerationReceived(AccelerationEvent event) {	
		WiiMoteServiceAccelerationEvent se = new WiiMoteServiceAccelerationEvent(event);	
		Iterator<IListenerCommModule> it = listenersList.iterator();
		while(it.hasNext()){
			IWiiMoteAccelerationService l = (IWiiMoteAccelerationService)it.next();
			l.accelerationReceived(se);		
		}				
	}

	/**
	 * Not implemented function because it does not belong to the throwing acceleration event logic.
	 */
	public void motionStartReceived(MotionStartEvent event) {}
	
	/**
	 * Not implemented function because it does not belong to the throwing acceleration event logic.
	 */
	public void motionStopReceived(MotionStopEvent event) {}


}
