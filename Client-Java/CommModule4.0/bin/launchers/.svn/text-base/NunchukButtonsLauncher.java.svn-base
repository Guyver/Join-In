package launchers;

import iservices.INunchukButtonsService;

import java.io.IOException;
import java.util.Iterator;

import org.wiigee.device.Wiimote;
import org.wiigee.event.NunchukButtonListener;
import org.wiigee.event.NunchukButtonPressedEvent;
import org.wiigee.event.NunchukButtonReleasedEvent;

import services.NunchukServiceButtonPressedEvent;
import services.NunchukServiceButtonReleasedEvent;

import control.DeviceManager;
import control.IListenerCommModule;
import control.LauncherWrapper;

public class NunchukButtonsLauncher extends LauncherWrapper implements NunchukButtonListener{

	/**
	 * This field is the reference to the object wiiMote of DeviceManager class.
	 */
	private Wiimote wiiMote;

	/**
	 * Returns the object wiiMote.
	 * @return noninManager The object wiiMote.
	 */
	public Wiimote getWiiMote(){
		return wiiMote;
	}
	
	/**
	 * Adds a listener to the list of listeners of the superclass LauncherWrapper.
	 * @param l The listener that have to be added.
	 */
	public void addListener (INunchukButtonsService l){	
		super.addListener(l);
		
	}
	/**
	 * Calls to the superclass LauncherWrapper function dropService and drops one WiiMoted labeled with the given parameter from the DeviceManager.
	 * It also sets the Nunchuk of that WiiMote to false.
	 * @param label The label of the WiiMote whose service is going to be dropped.
	 */
	public void dropService(int label){
		try {
			wiiMote.setNunchukEnabled(false);
		} catch (IOException e) {
			e.printStackTrace();
		}
		super.dropService();
		DeviceManager.getDeviceManager().dropWiiMote(label);	
	}
	
	/**
	 * Links this class with the DeviceManager by adding itself as listener.
	 * @param wm The Wiimote object that must be now the field noninManager of this class.
	 */
	public NunchukButtonsLauncher(Wiimote wm) {
		wiiMote= wm; 
		wm.addNunchukButtonListener(this);
	}


	
	//Specific functions
	
	/**
	 * Throws the given NunchukButtonPressedEvent to all listeners in the listenerList as a NunchukServiceButtonPressedEvent.
	 * @param event The NunchukButtonPressedEvent.
	 */
	@Override
	public void buttonPressedReceived(NunchukButtonPressedEvent event) {
		NunchukServiceButtonPressedEvent se = new NunchukServiceButtonPressedEvent(event);	
		Iterator<IListenerCommModule> it = listenersList.iterator();
		while(it.hasNext()){
			INunchukButtonsService l = (INunchukButtonsService)it.next();
			l.nunchukButtonPressedEventReceived(se);		
		}	 				
	}
	/**
	 * Throws the given NunchukButtonReleasedEvent to listeners in the listenerList as a NunchukServiceButtonReleasedEvent.
	 * @param event The NunchukButtonReleasedEvent.
	 */
	@Override
	public void buttonReleasedReceived(NunchukButtonReleasedEvent event) {
		NunchukServiceButtonReleasedEvent se = new NunchukServiceButtonReleasedEvent(event);	
		Iterator<IListenerCommModule> it = listenersList.iterator();
		while(it.hasNext()){
			INunchukButtonsService l = (INunchukButtonsService)it.next();
			l.nunchukButtonReleasedEventReceived(se);		
		}	 						
	}
}
